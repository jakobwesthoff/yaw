name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS targets
          - target: aarch64-apple-darwin
            os: macos-latest
            name: yaw-${{ needs.create-release.outputs.version }}-aarch64-apple-darwin
          - target: x86_64-apple-darwin
            os: macos-latest
            name: yaw-${{ needs.create-release.outputs.version }}-x86_64-apple-darwin
          
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: yaw-${{ needs.create-release.outputs.version }}-x86_64-unknown-linux-gnu
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: yaw-${{ needs.create-release.outputs.version }}-aarch64-unknown-linux-gnu
          
          # Windows targets (native MSVC)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: yaw-${{ needs.create-release.outputs.version }}-x86_64-pc-windows-msvc.exe
          - target: i686-pc-windows-msvc
            os: windows-latest
            name: yaw-${{ needs.create-release.outputs.version }}-i686-pc-windows-msvc.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure Cargo for ARM Linux cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/yaw.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/yaw ${{ matrix.name }}
          fi
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream